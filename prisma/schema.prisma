datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationUser[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       OrganizationUser[]
  teams       Team[]
  conversations Conversation[]
}

model OrganizationUser {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("member")
  joinedAt       DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@unique([userId, organizationId])
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String
  progress       Int          @default(0)
  isRoot         Boolean      @default(false)
  parentId       String?
  leaders        String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Conversation {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  objective      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  todos          ConversationTodo[]
}

model ConversationTodo {
  id             String       @id @default(cuid())
  conversationId String
  teamId         String
  type           String
  title          String
  content        String?
  status         String       @default("not-started")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}