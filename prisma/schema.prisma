datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  documents     Document[]   @relation("DocumentOwner")
  sharedDocs    DocumentShare[]
  practiceNotes CoachingNote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Document is the main container (replacing Organization/Conversation)
model Document {
  id           String   @id @default(cuid())
  name         String
  ownerId      String
  owner        User     @relation("DocumentOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  teams        Team[]
  shares       DocumentShare[]
  practices    PracticeSession[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([ownerId])
}

model DocumentShare {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       String   @default("viewer") // viewer | editor
  createdAt  DateTime @default(now())
  
  @@unique([documentId, userId])
  @@index([userId])
}

model Team {
  id           String   @id @default(cuid())
  documentId   String
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  name         String
  leaders      String   @default("")
  description  String   @default("")
  color        String
  isRoot       Boolean  @default(false)
  parentId     String?
  todos        Todo[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([documentId])
}

model Todo {
  id           String   @id @default(cuid())
  teamId       String
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  type         String   // focus | expertise | perspective | thesis | contentMap | leadGen
  title        String
  content      String   @default("")
  status       String   @default("not-started") // not-started | in-progress | review | complete
  aiIdea       Json?    // Stores the AI-generated idea
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([teamId])
}

model PracticeSession {
  id           String         @id @default(cuid())
  documentId   String
  document     Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  teamId       String
  clientPersona Json          // Stores the full persona object
  messages     Message[]
  coachingNotes CoachingNote[]
  expertiseScore Int          @default(0)
  isActive     Boolean        @default(true)
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  
  @@index([documentId])
}

model Message {
  id         String          @id @default(cuid())
  sessionId  String
  session    PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role       String          // user | client
  content    String
  timestamp  DateTime        @default(now())
  
  @@index([sessionId])
}

model CoachingNote {
  id              String          @id @default(cuid())
  sessionId       String
  session         PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String          // strength | improvement | insight
  content         String
  relatedMessage  String?
  timestamp       DateTime        @default(now())
  
  @@index([sessionId])
  @@index([userId])
}